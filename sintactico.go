// Code generated by goyacc - DO NOT EDIT.

// +build ignore
package main

import __yyfmt__ "fmt"

import (
	"bufio"
	"fmt"
	"log"
	//"archivos/MIA-Proyecto1_201709454/analizador/arbol"
	"os"
	"proyectos/MIAProyectoFase1/analizador/arbol"
)

var oParametro arbol.Parametro
var oInstruccion arbol.Instruccion
var lInstruccion []arbol.Instruccion
var lAST []arbol.AST
var auxPath string

type yySymType struct {
	yys   int
	value string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault    = 57410
	yyEofCode    = 57344
	add          = 57382
	archivo      = 57409
	asignacion   = 57346
	bf           = 57400
	cat          = 57364
	chgrp        = 57373
	chmod        = 57362
	chown        = 57372
	cont         = 57392
	cp           = 57369
	delete       = 57381
	dest         = 57395
	e            = 57398
	edit         = 57366
	yyErrCode    = 57345
	exec         = 57348
	fast         = 57404
	fdisk        = 57352
	ff           = 57401
	filen        = 57393
	find         = 57371
	fit          = 57380
	full         = 57403
	grp          = 57388
	guion        = 57347
	id           = 57384
	idn          = 57383
	k            = 57396
	l            = 57399
	login        = 57356
	logout       = 57357
	m            = 57397
	mkdir        = 57368
	mkdisk       = 57350
	mkfile       = 57363
	mkfs         = 57355
	mkgrp        = 57358
	mkusr        = 57360
	mount        = 57353
	mv           = 57370
	name         = 57377
	numero       = 57406
	p            = 57391
	path         = 57375
	pause        = 57349
	pwd          = 57387
	r            = 57390
	ren          = 57367
	rep          = 57374
	rf           = 57394
	rid          = 57405
	rm           = 57365
	rmdisk       = 57351
	rmgrp        = 57359
	rmusr        = 57361
	rtype        = 57379
	rutaCompleja = 57408
	rutaSimple   = 57407
	size         = 57376
	tipo         = 57385
	ugo          = 57389
	unit         = 57378
	unmount      = 57354
	usr          = 57386
	wf           = 57402

	yyMaxDepth = 200
	yyTabOfs   = -74
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57347: 0,  // guion (73x)
		57344: 1,  // $end (72x)
		57348: 2,  // exec (72x)
		57352: 3,  // fdisk (72x)
		57350: 4,  // mkdisk (72x)
		57353: 5,  // mount (72x)
		57349: 6,  // pause (72x)
		57374: 7,  // rep (72x)
		57351: 8,  // rmdisk (72x)
		57354: 9,  // unmount (72x)
		57346: 10, // asignacion (10x)
		57424: 11, // PARAMETRO_PATH (10x)
		57423: 12, // PARAMETRO_NAME (6x)
		57375: 13, // path (5x)
		57420: 14, // PARAMETRO_FIT (4x)
		57425: 15, // PARAMETRO_SIZE (4x)
		57427: 16, // PARAMETRO_UNIT (4x)
		57384: 17, // id (3x)
		57377: 18, // name (3x)
		57406: 19, // numero (3x)
		57421: 20, // PARAMETRO_ID (3x)
		57405: 21, // rid (3x)
		57380: 22, // fit (2x)
		57412: 23, // INSTRUCCION (2x)
		57418: 24, // PARAMETRO_ADD (2x)
		57419: 25, // PARAMETRO_DELETE (2x)
		57426: 26, // PARAMETRO_TYPE (2x)
		57408: 27, // rutaCompleja (2x)
		57376: 28, // size (2x)
		57378: 29, // unit (2x)
		57382: 30, // add (1x)
		57409: 31, // archivo (1x)
		57400: 32, // bf (1x)
		57381: 33, // delete (1x)
		57398: 34, // e (1x)
		57404: 35, // fast (1x)
		57401: 36, // ff (1x)
		57403: 37, // full (1x)
		57411: 38, // INICIO (1x)
		57396: 39, // k (1x)
		57399: 40, // l (1x)
		57413: 41, // LISTA_INSTRUCCION (1x)
		57414: 42, // LST_FDISK (1x)
		57415: 43, // LST_MKDIS (1x)
		57416: 44, // LST_MOUNT (1x)
		57417: 45, // LST_REP (1x)
		57397: 46, // m (1x)
		57391: 47, // p (1x)
		57379: 48, // rtype (1x)
		57407: 49, // rutaSimple (1x)
		57428: 50, // VALOR_DELETE (1x)
		57429: 51, // VALOR_FIT (1x)
		57430: 52, // VALOR_NAME (1x)
		57431: 53, // VALOR_PATH (1x)
		57432: 54, // VALOR_TYPE (1x)
		57433: 55, // VALOR_UNIT (1x)
		57402: 56, // wf (1x)
		57410: 57, // $default (0x)
		57364: 58, // cat (0x)
		57373: 59, // chgrp (0x)
		57362: 60, // chmod (0x)
		57372: 61, // chown (0x)
		57392: 62, // cont (0x)
		57369: 63, // cp (0x)
		57395: 64, // dest (0x)
		57366: 65, // edit (0x)
		57345: 66, // error (0x)
		57393: 67, // filen (0x)
		57371: 68, // find (0x)
		57388: 69, // grp (0x)
		57383: 70, // idn (0x)
		57356: 71, // login (0x)
		57357: 72, // logout (0x)
		57368: 73, // mkdir (0x)
		57363: 74, // mkfile (0x)
		57355: 75, // mkfs (0x)
		57358: 76, // mkgrp (0x)
		57360: 77, // mkusr (0x)
		57370: 78, // mv (0x)
		57422: 79, // PARAMETRO_IDN (0x)
		57387: 80, // pwd (0x)
		57390: 81, // r (0x)
		57367: 82, // ren (0x)
		57394: 83, // rf (0x)
		57365: 84, // rm (0x)
		57359: 85, // rmgrp (0x)
		57361: 86, // rmusr (0x)
		57385: 87, // tipo (0x)
		57389: 88, // ugo (0x)
		57386: 89, // usr (0x)
	}

	yySymNames = []string{
		"guion",
		"$end",
		"exec",
		"fdisk",
		"mkdisk",
		"mount",
		"pause",
		"rep",
		"rmdisk",
		"unmount",
		"asignacion",
		"PARAMETRO_PATH",
		"PARAMETRO_NAME",
		"path",
		"PARAMETRO_FIT",
		"PARAMETRO_SIZE",
		"PARAMETRO_UNIT",
		"id",
		"name",
		"numero",
		"PARAMETRO_ID",
		"rid",
		"fit",
		"INSTRUCCION",
		"PARAMETRO_ADD",
		"PARAMETRO_DELETE",
		"PARAMETRO_TYPE",
		"rutaCompleja",
		"size",
		"unit",
		"add",
		"archivo",
		"bf",
		"delete",
		"e",
		"fast",
		"ff",
		"full",
		"INICIO",
		"k",
		"l",
		"LISTA_INSTRUCCION",
		"LST_FDISK",
		"LST_MKDIS",
		"LST_MOUNT",
		"LST_REP",
		"m",
		"p",
		"rtype",
		"rutaSimple",
		"VALOR_DELETE",
		"VALOR_FIT",
		"VALOR_NAME",
		"VALOR_PATH",
		"VALOR_TYPE",
		"VALOR_UNIT",
		"wf",
		"$default",
		"cat",
		"chgrp",
		"chmod",
		"chown",
		"cont",
		"cp",
		"dest",
		"edit",
		"error",
		"filen",
		"find",
		"grp",
		"idn",
		"login",
		"logout",
		"mkdir",
		"mkfile",
		"mkfs",
		"mkgrp",
		"mkusr",
		"mv",
		"PARAMETRO_IDN",
		"pwd",
		"r",
		"ren",
		"rf",
		"rm",
		"rmgrp",
		"rmusr",
		"tipo",
		"ugo",
		"usr",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {38, 1},
		2:  {41, 2},
		3:  {41, 1},
		4:  {23, 1},
		5:  {23, 2},
		6:  {23, 2},
		7:  {23, 2},
		8:  {23, 2},
		9:  {23, 2},
		10: {23, 2},
		11: {23, 2},
		12: {45, 2},
		13: {45, 2},
		14: {45, 2},
		15: {45, 1},
		16: {45, 1},
		17: {45, 1},
		18: {44, 2},
		19: {44, 2},
		20: {44, 1},
		21: {44, 1},
		22: {42, 2},
		23: {42, 2},
		24: {42, 2},
		25: {42, 2},
		26: {42, 2},
		27: {42, 2},
		28: {42, 2},
		29: {42, 2},
		30: {42, 1},
		31: {42, 1},
		32: {42, 1},
		33: {42, 1},
		34: {42, 1},
		35: {42, 1},
		36: {42, 1},
		37: {42, 1},
		38: {43, 2},
		39: {43, 2},
		40: {43, 2},
		41: {43, 2},
		42: {43, 1},
		43: {43, 1},
		44: {43, 1},
		45: {43, 1},
		46: {11, 4},
		47: {53, 1},
		48: {53, 1},
		49: {15, 4},
		50: {12, 4},
		51: {52, 1},
		52: {52, 1},
		53: {52, 1},
		54: {16, 4},
		55: {55, 1},
		56: {55, 1},
		57: {26, 4},
		58: {54, 1},
		59: {54, 1},
		60: {54, 1},
		61: {14, 4},
		62: {51, 1},
		63: {51, 1},
		64: {51, 1},
		65: {25, 4},
		66: {50, 1},
		67: {50, 1},
		68: {24, 4},
		69: {24, 5},
		70: {79, 5},
		71: {79, 4},
		72: {20, 5},
		73: {20, 4},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [108][]uint16{
		// 0
		{2: 79, 82, 80, 83, 78, 85, 81, 84, 23: 77, 38: 75, 41: 76},
		{1: 74},
		{1: 73, 79, 82, 80, 83, 78, 85, 81, 84, 23: 181},
		{1: 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{1: 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 5
		{169, 11: 180},
		{175, 11: 172, 14: 174, 171, 173, 43: 170},
		{169, 11: 168},
		{129, 11: 123, 127, 14: 125, 121, 122, 24: 128, 126, 124, 42: 120},
		{117, 11: 115, 116, 44: 114},
		// 10
		{113, 20: 112},
		{90, 11: 88, 87, 20: 89, 45: 86},
		{90, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11: 110, 109, 20: 111},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 15
		{105, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{13: 91, 18: 92, 21: 93},
		{10: 101},
		{10: 96},
		{10: 94},
		// 20
		{17: 95},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{17: 99, 27: 100, 31: 98, 52: 97},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 25
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{27: 104, 49: 103, 53: 102},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 30
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{21: 106},
		{10: 107},
		{17: 108},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		// 35
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{105, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{105, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{21: 93},
		// 40
		{117, 65, 65, 65, 65, 65, 65, 65, 65, 65, 11: 118, 119},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{13: 91, 18: 92},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 45
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{129, 66, 66, 66, 66, 66, 66, 66, 66, 66, 11: 162, 166, 14: 164, 160, 161, 24: 167, 165, 163},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 50
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 55
		{13: 91, 18: 92, 22: 133, 28: 130, 131, 135, 33: 134, 48: 132},
		{10: 158},
		{10: 154},
		{10: 149},
		{10: 144},
		// 60
		{10: 140},
		{10: 136},
		{138, 19: 137},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{19: 139},
		// 65
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{35: 143, 37: 142, 50: 141},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		// 70
		{32: 146, 36: 147, 51: 145, 56: 148},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 75
		{34: 152, 40: 153, 47: 151, 54: 150},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		// 80
		{39: 156, 46: 157, 55: 155},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{19: 159},
		// 85
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 90
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{1: 67, 67, 67, 67, 67, 67, 67, 67, 67},
		// 95
		{13: 91},
		{175, 68, 68, 68, 68, 68, 68, 68, 68, 68, 11: 177, 14: 179, 176, 178},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		// 100
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{13: 91, 22: 133, 28: 130, 131},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		// 105
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{1: 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{1: 72, 72, 72, 72, 72, 72, 72, 72, 72},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 66

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			AddAST()
		}
	case 4:
		{
			AddInstruccion("pause")
		}
	case 5:
		{
			EjecutarExec()
		}
	case 6:
		{
			AddInstruccion("mkdisk")
		}
	case 7:
		{
			AddParametro()
			AddInstruccion("rmdisk")
		}
	case 8:
		{
			AddInstruccion("fdisk")
		}
	case 9:
		{
			AddInstruccion("mount")
		}
	case 10:
		{
			AddParametro()
			AddInstruccion("unmount")
		}
	case 11:
		{
			AddInstruccion("rep")
		}
	case 12:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 13:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 14:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 15:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 16:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 17:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 18:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 19:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 20:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 21:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 22:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 23:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 24:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 25:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 26:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 27:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 28:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 29:
		{
			yyVAL.value = yyS[yypt-1].value + yyS[yypt-0].value
			AddParametro()
		}
	case 30:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 31:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 32:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 33:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 34:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 35:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 36:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 37:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 38:
		{
			yyVAL.value = yyS[yypt-1].value
			AddParametro()
		}
	case 39:
		{
			yyVAL.value = yyS[yypt-1].value
			AddParametro()
		}
	case 40:
		{
			yyVAL.value = yyS[yypt-1].value
			AddParametro()
		}
	case 41:
		{
			yyVAL.value = yyS[yypt-1].value
			AddParametro()
		}
	case 42:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 43:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 44:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 45:
		{
			yyVAL.value = yyS[yypt-0].value
			AddParametro()
		}
	case 46:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			auxPath = yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 47:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 48:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 49:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 50:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 51:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 52:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 53:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 54:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 55:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 56:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 57:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 58:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 59:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 60:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 61:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 62:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 63:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 64:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 65:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 66:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 67:
		{
			yyVAL.value = yyS[yypt-0].value
		}
	case 68:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 69:
		{
			yyVAL.value = yyS[yypt-4].value + yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-3].value, "-"+yyS[yypt-0].value)
		}
	case 70:
		{
			yyVAL.value = yyS[yypt-4].value + yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
		}
	case 71:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
		}
	case 72:
		{
			yyVAL.value = yyS[yypt-4].value + yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}
	case 73:
		{
			yyVAL.value = yyS[yypt-3].value + yyS[yypt-2].value + yyS[yypt-1].value + yyS[yypt-0].value
			CrearParametro(yyS[yypt-2].value, yyS[yypt-0].value)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// CrearParametro da un valor nuevo al parámetro axuliar
func CrearParametro(tipo string, valor string) {
	oParametro = arbol.Parametro{Tipo: tipo, Valor: valor}
}

// CrearInstruccion da un valor nuevo a la intruccion auxiliar
func CrearInstruccion(tipo string) {
	oInstruccion = arbol.Instruccion{Tipo: tipo}
}

// AddParametro añade el parámetro auxiliar a la lista de parametros de la instrucción actual
func AddParametro() {
	oInstruccion.Parametros = append(oInstruccion.Parametros, oParametro)
}

// AddInstruccion añade el parámetro auxiliar a la lista de parametros de la instrucción actual
func AddInstruccion(tipo string) {
	oInstruccion.Tipo = tipo
	lInstruccion = append(lInstruccion, oInstruccion)
	oInstruccion = arbol.Instruccion{}
}

// AddAST añade lista de instrucciones para ejecutar
func AddAST() {
	ast := arbol.AST{}
	ast.Instrucciones = lInstruccion
	lInstruccion = []arbol.Instruccion{}
	lAST = append(lAST, ast)
}

func EjecutarExec() {
	if file, err := os.Open(auxPath); err == nil {
		yyParse(newLexer(bufio.NewReader(file)))

		ast := lAST[len(lAST)-1]
		ast.EjecutarAST()
		lAST = lAST[:len(lAST)-1]

		fmt.Println("Se ha ejecutado el archivo con èxito")
	} else {
		fmt.Println("No se ha podido abrir el archivo")
		log.Panic(err)
	}
}
